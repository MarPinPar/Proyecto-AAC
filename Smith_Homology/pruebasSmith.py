from sympy import Matrix
from smith import forma_normal_smith

def smith(matriz):
    print("\nProbando matriz:")
    print(matriz)
    S, D, T = forma_normal_smith(matriz)
    print("\nForma Normal de Smith D:")
    print(D)
    verificacion = S * matriz * T
    assert verificacion.equals(D), "Error: La verificación S * A * T = D falló"
    print("Verificación exitosa: S * A * T = D")

if __name__ == "__main__":

    # # Caso base (matrices de prueba)
    # matriz1 = Matrix([
    #     [-1, -1, -1, 0, 0, 0, 0, 0, 0],
    #     [1,  0,  0, -1, -1, 0, 0, 0, 0],
    #     [0,  1,  0,  1,  0, -1, -1, 0, 0],
    #     [0,  0,  1,  0,  1,  1,  0, -1, 0],
    #     [0,  0,  0,  0,  0,  0,  1, 1, 0],
    #     [0,  0,  0,  0,  0,  0,  0, 0, -1],
    #     [0,  0,  0,  0,  0,  0,  0, 0, 1]
    # ])
    
    # matriz2 = Matrix([
    #     [2, 4],
    #     [6, 8]
    # ])
    
    # matriz3 = Matrix([
    #     [0, 1, 2],
    #     [3, 4, 5],
    #     [6, 7, 8]
    # ])

    # smith(matriz1)
    # smith(matriz2)
    # smith(matriz3)

    # Matrices del proyecto

    m_1 = Matrix([
        [6, 2, 3],
        [2, 4, 0],
        [3, 0, 1]
    ])

    m_2 = Matrix([
        [0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1],
        [-1, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0],
        [0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0],
        [1, 1, 0, 1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 1, 1, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 1, 1, 0, 1],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]
    ])

    m_3 = Matrix([
        [1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
        [-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0],
        [0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
        [0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1],
        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1],
        [0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0],
        [0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0],
        [0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0]
    ])

    m_4 = Matrix([
        [0, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0],
        [-1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, -1],
        [1, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, -1, 0, 0, 0, 0, -1, 1],
        [0, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]
    ])

    m_5 = Matrix([
        [1, 0, 0, 0, 0, 0],
        [-1, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, -1, 0],
        [0, 1, 0, 0, 0, 0],
        [0, -1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 0],
        [0, 0, -1, 1, 0, 0],
        [0, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 0, 0],
        [0, 0, 0, -1, 1, 0],
        [0, 0, 0, 0, -1, -1],
        [0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 1]
    ])

    smith(m_1)
    smith(m_2)
    smith(m_3)
    smith(m_4)
    smith(m_5)